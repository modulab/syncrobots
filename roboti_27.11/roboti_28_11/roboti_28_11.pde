import java.awt.*;
import controlP5.*;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.ArrayList;
import java.util.List;
import processing.net.*;
import java.net.*;

ControlFrame cf;

final Blocks blocks = new Blocks();
RVOMath RVOMath = new RVOMath();

boolean esc = true;
Config config = new Config();
Leds leds = new Leds();

String[] ips = config.ips;
int robotNR = config.ips.length;

int fineTuneMotors = 0;

int razaRobot = 107;
int razaDeOcolit = 197;

int motorSpeed = 870;

int robotSelected = -1;

String[] data =new String[robotNR];

//[stage][x][y] {{200,2214},{875,1671},{1045,1967},{754,1487},{317,2045},{660,875},{74,1339},{633,1783},},
//{{457,1505},{80,2140},{1,1875},{333,1217},{-66,1619},{224,1516},{74,1340},{315,1739},},

//cu tasta N se trece la urmatoarea
// cu P se afiseaza snapshot de pozitie care urmeaza sa fie copiat aici
int[][][] puncte = {
{{688,2102},{-70,2349},{-507,2515},{451,2163},{-678,1267},{-286,1146},{191,2239},{451,894},{-296,2434},{232,983},{-592,1253},{890,2020},{-41,1074},{688,2102},{-70,2349},{-507,2515},{451,2163},{-678,1267},{-286,1146},{191,2239},{451,894},{-296,2434},{232,983},{-592,1253},{890,2020},{-41,1074},},
//{{264,967},},
//{{168,2361},{549,1710},{-229,2039},{-325,2387},{358,2272},{-20,1941},{730,2084},{-584,2338},{127,1862},{-138,2559},{415,1954},{333,1782},{524,2198},{-440,2218},{-297,2689},{626,1879},{-459,2523},{-4,2457},{235,2038},{77,2137},{-111,2240},{168,2361},{549,1710},{-229,2039},{-325,2387},{358,2272},{-20,1941},{730,2084},{-584,2338},{127,1862},{-138,2559},{415,1954},{333,1782},{524,2198},{-440,2218},{-297,2689},{626,1879},{-459,2523},{-4,2457},{235,2038},{77,2137},{-111,2240},},
//{{627,2789},{949,1680},{-534,1668},{-67,2885},{993,2167},{-371,1407},{962,2409},{-581,2185},{88,1168},{225,2894},{344,1145},{624,1273},{862,2603},{-639,1943},{-346,2732},{1040,1912},{-507,2433},{409,2813},{760,1452},{-146,1297},{186,2060},{168,2361},{549,1710},{-229,2039},{-325,2387},{358,2272},{-20,1941},{730,2084},{-584,2338},{127,1862},{-138,2559},{415,1954},{333,1782},{524,2198},{-440,2218},{-297,2689},{626,1879},{-459,2523},{-4,2457},{235,2038},{77,2137},{-111,2240},},
//{{709,2748},{949,1680},{-534,1668},{77,2922},{994,2167},{-370,1408},{962,2409},{-581,2185},{89,1168},{307,2912},{345,1145},{624,1273},{862,2602},{-639,1943},{-369,2684},{1040,1912},{-507,2432},{498,2825},{760,1452},{-146,1296},{-161,2808},{168,2361},{549,1710},{-229,2039},{-325,2387},{358,2272},{-20,1941},{730,2084},{-584,2338},{127,1862},{-138,2559},{415,1954},{333,1782},{524,2198},{-440,2218},{-297,2689},{626,1879},{-459,2523},{-4,2457},{235,2038},{77,2137},{-111,2240},},
//{{695,2523},{109,1682},{-506,2012},{180,2779},{533,1488},{-245,2158},{1036,2376},{142,2470},{-10,2156},{368,2690},{-268,1882},{-55,1791},{853,2470},{225,2261},{-27,2910},{350,1574},{1,2644},{566,2609},},
//{{695,2519},{864,2102},{96,2140},{180,2775},{452,2021},{-210,2593},{1035,2372},{-242,2793},{-118,2384},{367,2687},{251,2031},{666,2043},{852,2466},{-46,2264},{-27,2905},{976,2208},{-181,2957},{565,2605},},
//{{695,2520},{977,2045},{45,2097},{180,2775},{532,1897},{-342,2277},{1035,2373},{-470,2342},{-195,2211},{367,2686},{238,1992},{821,1833},{852,2466},{-68,2162},{-27,2904},{1021,2197},{-182,2958},{565,2604},},
//{{733,2504},{977,2044},{648,2557},{180,2775},{820,1769},{72,2837},{1035,2373},{-129,2952},{274,2722},{367,2687},{736,1621},{899,1893},{853,2467},{465,2648},{-27,2906},{1020,2197},{-237,2985},{559,2607},},
//{{774,2565},{459,2429},{636,2626},{-70,2133},{256,1838},{85,2752},{1124,2466},{-170,2770},{393,2305},{308,2756},{58,1969},{449,1664},{912,2541},{471,2683},{-196,2355},{634,1514},{-283,2632},{265,2107},},
//{{774,2567},{440,2539},{636,2627},{-33,2218},{485,1948},{104,2864},{1072,2384},{-79,2900},{372,2394},{314,2788},{127,2113},{769,1948},{909,2501},{471,2684},{-241,2352},{977,2179},{-235,2631},{296,2235},},


/*{{672,2726},{-87,2882},{-519,2566},{204,2238},{488,2856},{26,3246},{420,2487},{27,2797},{366,2952},{261,2611},{-216,2990},{78,2333},{120,3162},{-383,2449},{259,3048},{-235,2314},{-413,2751},{141,2705},{-80,2466},{-236,2601},},
{{530,2583},{-163,2794},{-613,2451},{151,2193},{372,2736},{-65,3147},{314,2368},{-52,2701},{258,2840},{165,2507},{-284,2908},{38,2288},{20,3059},{-308,2213},{157,2937},{5,1973},{-459,2690},{50,2606},{-123,2413},{-281,2547},},
{{523,2568},{-318,2551},{-788,2124},{129,2160},{310,2651},{-255,2838},{287,2330},{-185,2507},{160,2692},{94,2407},{-478,2613},{-14,2201},{-159,2801},{-390,2048},{29,2741},{1,1968},{-637,2368},{-53,2456},{-216,2254},{-415,2310},},
{{522,2567},{-635,2297},{-469,1661},{129,2160},{310,2650},{-546,2601},{286,2330},{-425,2393},{77,2706},{94,2406},{-852,2137},{-13,2200},{-370,2690},{-340,1840},{-167,2711},{1,1968},{-648,1883},{-219,2439},{-226,2153},{-419,2028},},
{{743,2132},{-788,2208},{63,1050},{625,1605},{495,2799},{-547,2601},{931,1954},{-597,2438},{167,3023},{299,2881},{-916,1913},{775,1758},{-398,2748},{251,1227},{-103,2947},{449,1443},{-530,1474},{-221,2829},{-740,1634},{-209,1239},},
{{745,2131},{-787,2208},{63,1050},{626,1606},{495,2799},{-546,2602},{932,1955},{-597,2437},{166,3023},{299,2881},{-916,1914},{775,1758},{-397,2748},{251,1227},{-102,2948},{449,1443},{-529,1475},{-220,2830},{-740,1634},{-209,1239},},
{{745,2131},{-842,2116},{63,1050},{626,1606},{545,2316},{-515,2521},{932,1954},{-667,2357},{137,2698},{342,2507},{-674,1969},{776,1759},{-394,2670},{251,1227},{-146,2952},{449,1443},{-382,1714},{-273,2823},{-542,1852},{-67,1462},},
{{745,2131},{-841,2116},{79,2123},{626,1606},{545,2315},{-515,2522},{932,1954},{-667,2357},{137,2698},{342,2508},{-674,1969},{776,1758},{-393,2670},{251,1227},{-146,2953},{449,1443},{-382,1714},{-272,2822},{-542,1852},{-67,1463},},
{{745,2131},{-214,2117},{78,2123},{625,1606},{545,2316},{-515,2521},{413,2089},{-667,2358},{138,2698},{343,2507},{-673,1969},{775,1758},{-394,2671},{251,1227},{-145,2952},{449,1443},{-382,1714},{-272,2823},{-542,1852},{-67,1463},},
{{745,2130},{-214,2115},{79,2122},{626,1605},{544,2315},{-514,2522},{413,2088},{-667,2356},{137,2696},{342,2506},{-673,1968},{775,1757},{-393,2670},{128,1850},{-12,2393},{449,1442},{-382,1714},{-272,2822},{-542,1851},{-67,1462},},
{{774,2129},{-214,2116},{79,2122},{626,1606},{650,2394},{-575,2467},{414,2088},{-699,2181},{186,2755},{413,2587},{-673,1968},{778,1833},{-403,2694},{129,1851},{-11,2394},{238,1369},{-458,1561},{-104,2866},{-612,1720},{-55,1417},},
{{807,1828},{-214,2119},{79,2124},{354,1304},{765,2138},{-366,2672},{413,2089},{-575,2468},{410,2597},{660,2412},{-686,2206},{647,1579},{-107,2868},{129,1854},{-11,2397},{-47,1411},{-593,1750},{169,2753},{-676,1973},{-366,1549},},

{{808,1827},{-130,2299},{46,2061},{353,1302},{766,2139},{-379,2701},{272,1873},{-575,2469},{410,2595},{659,2411},{-686,2206},{646,1577},{-107,2869},{-133,1864},{276,2322},{-47,1409},{-593,1748},{170,2753},{-675,1971},{-366,1548},},

{{807,1828},{-214,2119},{79,2124},{354,1304},{765,2138},{-366,2672},{413,2089},{-575,2468},{410,2597},{660,2412},{-686,2206},{647,1579},{-107,2868},{129,1854},{-11,2397},{-47,1411},{-593,1750},{169,2753},{-676,1973},{-366,1549},},
{{774,2129},{-214,2116},{79,2122},{626,1606},{650,2394},{-575,2467},{414,2088},{-699,2181},{186,2755},{413,2587},{-673,1968},{778,1833},{-403,2694},{129,1851},{-11,2394},{238,1369},{-458,1561},{-104,2866},{-612,1720},{-55,1417},},
{{745,2130},{-214,2115},{79,2122},{626,1605},{544,2315},{-514,2522},{413,2088},{-667,2356},{137,2696},{342,2506},{-673,1968},{775,1757},{-393,2670},{128,1850},{-12,2393},{449,1442},{-382,1714},{-272,2822},{-542,1851},{-67,1462},},
{{745,2131},{-214,2117},{78,2123},{625,1606},{545,2316},{-515,2521},{413,2089},{-667,2358},{138,2698},{343,2507},{-673,1969},{775,1758},{-394,2671},{251,1227},{-145,2952},{449,1443},{-382,1714},{-272,2823},{-542,1852},{-67,1463},},
{{745,2131},{-841,2116},{79,2123},{626,1606},{545,2315},{-515,2522},{932,1954},{-667,2357},{137,2698},{342,2508},{-674,1969},{776,1758},{-393,2670},{251,1227},{-146,2953},{449,1443},{-382,1714},{-272,2822},{-542,1852},{-67,1463},},
{{745,2131},{-842,2116},{63,1050},{626,1606},{545,2316},{-515,2521},{932,1954},{-667,2357},{137,2698},{342,2507},{-674,1969},{776,1759},{-394,2670},{251,1227},{-146,2952},{449,1443},{-382,1714},{-273,2823},{-542,1852},{-67,1462},},
{{745,2131},{-787,2208},{63,1050},{626,1606},{495,2799},{-546,2602},{932,1955},{-597,2437},{166,3023},{299,2881},{-916,1914},{775,1758},{-397,2748},{251,1227},{-102,2948},{449,1443},{-529,1475},{-220,2830},{-740,1634},{-209,1239},},
{{522,2567},{-635,2297},{-469,1661},{129,2160},{310,2650},{-546,2601},{286,2330},{-425,2393},{77,2706},{94,2406},{-852,2137},{-13,2200},{-370,2690},{-340,1840},{-167,2711},{1,1968},{-648,1883},{-219,2439},{-226,2153},{-419,2028},},
{{523,2568},{-318,2551},{-788,2124},{129,2160},{310,2651},{-255,2838},{287,2330},{-185,2507},{160,2692},{94,2407},{-478,2613},{-14,2201},{-159,2801},{-390,2048},{29,2741},{1,1968},{-637,2368},{-53,2456},{-216,2254},{-415,2310},},
{{530,2583},{-163,2794},{-613,2451},{151,2193},{372,2736},{-65,3147},{314,2368},{-52,2701},{258,2840},{165,2507},{-284,2908},{38,2288},{20,3059},{-308,2213},{157,2937},{5,1973},{-459,2690},{50,2606},{-123,2413},{-281,2547},},
{{672,2726},{-87,2882},{-519,2566},{204,2238},{488,2856},{26,3246},{420,2487},{27,2797},{366,2952},{261,2611},{-216,2990},{78,2333},{120,3162},{-383,2449},{259,3048},{-235,2314},{-413,2751},{141,2705},{-80,2466},{-236,2601},},


{{21,1747},{34,2087},{800,1783},{13,1394},{-236,2751},{582,1664},{1030,1956},{-5,1593},{356,1562},{-327,1983},{-354,2515},{47,1890},{-606,2003},{-100,2949},{-177,2027},{-533,2148},{219,1486},{-448,2346},{-467,1942},},
{{576,1538},{-100,1428},{804,2285},{30,1367},{77,2653},{872,2051},{673,2460},{206,1358},{855,1883},{-307,1662},{-144,2576},{724,1689},{-443,1951},{383,2670},{-206,1516},{-419,2164},{397,1445},{-327,2380},{-433,1791},},
{{576,1538},{-100,1428},{803,2284},{30,1368},{297,2493},{872,2051},{674,2461},{201,1360},{856,1882},{-307,1662},{148,2336},{724,1689},{-289,1854},{420,2644},{-206,1516},{-180,1975},{400,1450},{-25,2150},{-411,1751},},
{{382,1659},{-571,2060},{698,2274},{-568,2281},{296,2493},{727,2091},{586,2436},{152,1390},{668,1996},{-476,2185},{148,2336},{508,1807},{-289,1853},{444,2512},{-460,2411},{-181,1975},{270,1528},{-25,2149},{-665,2142},},
{{-85,2059},{-571,2061},{750,2347},{-567,2281},{297,2492},{854,2243},{599,2477},{-347,1784},{159,2318},{-476,2186},{-371,2307},{16,2187},{-254,2690},{421,2622},{-459,2412},{-254,2439},{-198,1927},{-365,2525},{-666,2143},},
{{244,1789},{-189,1788},{910,2124},{-568,2281},{495,2164},{778,2060},{364,2289},{-100,1605},{601,1980},{-138,1927},{-62,2154},{367,1851},{70,2559},{223,2410},{-459,2411},{-19,2317},{96,1712},{154,2732},{-665,2142},},
{{-70,1971},{-489,1717},{-60,2237},{-396,2165},{381,2395},{128,2217},{420,2579},{-336,1677},{298,2261},{-620,1882},{-168,2430},{-161,2116},{52,2727},{349,2710},{-291,2302},{-55,2576},{-161,1782},{160,2826},{-503,2019},},
*/


{{211,2152},{-149,1669},{542,2111},{90,1489},{-561,2146},{174,2486},{-473,2317},{207,1888},{111,2641},{-475,1999},{-339,2388},{359,2275},{82,1997},{-95,2715},{-53,1809},{-348,1915},{-189,2284},{-97,2184},{47,2323},}, //se
{{210,2152},{-149,1669},{603,2063},{90,1489},{-528,1967},{-91,2613},{-635,2086},{207,1888},{-212,2655},{-401,1872},{499,2185},{358,2275},{83,1996},{-348,2441},{-54,1810},{-58,1556},{-506,2272},{-254,2279},{107,2458},},// ee
{{115,1552},{-95,1551},{302,1622},{90,1380},{51,2307},{-21,2571},{-633,2085},{251,1485},{-212,2655},{-324,1786},{180,1720},{195,1639},{-6,1670},{-348,2442},{-186,1938},{-26,1311},{-533,2326},{-54,2138},{113,2446},}, //u
{{18,1929},{-120,1822},{469,2020},{157,2016},{51,2307},{-173,2647},{-641,2037},{71,1542},{-302,2470},{-324,1786},{314,1836},{621,2193},{166,1706},{-413,2326},{-186,1938},{308,2046},{-534,2192},{-54,2138},{113,2446},},//in 
{{290,2179},{76,1566},{630,1882},{362,1554},{-353,2394},{130,2480},{13,2568},{482,1677},{-243,2556},{-587,2111},{-226,2297},{567,2138},{82,1997},{-131,2664},{-40,1800},{-348,1915},{-224,2031},{-96,2184},{-469,2011},}, //20
{{-559,1979},{-121,1476},{614,2253},{569,2071},{231,2585},{-196,2677},{-510,1789},{65,1442},{-356,2499},{-441,1647},{441,1720},{525,2404},{239,1580},{-451,2348},{-310,1548},{536,1937},{-555,2196},{405,2472},{65,2643},},
 //0
 {{290,2179},{76,1566},{630,1882},{362,1554},{-353,2394},{130,2480},{13,2568},{482,1677},{-243,2556},{-587,2111},{-226,2297},{567,2138},{82,1997},{-131,2664},{-40,1800},{-348,1915},{-224,2031},{-96,2184},{-469,2011},}, //20

};

boolean staging = true;
boolean swarmMode = false;
boolean rotireInLocClockwise = false;
boolean[] stageComplete = {false, false, false, false, false};

String[] culori = {"0xff0000", "0xffff00", "0xff00ff", "0x0000ff"};

int stage = 0;

public Client[] cPort23 = new Client[robotNR];
public Client[] cPort24 = new Client[robotNR];
public Robot[] robot = new Robot[robotNR];

final Simulator instance = new Simulator();

void settings() {
  size(1000, 800, P2D);
}


void setup() {

  println((byte)(255&0xff));

  cf = new ControlFrame(this, 400, 800, "Controls", config);
  delay(1000); // de reviziut  ii ia ceva lu controlp5 sa se activeze

  for (int i = 0; i < robotNR; i++)
  {
    new ClientThread(i, this).start();
    println("Init client " + ips[i]);
  }


  for (int i = 0; i < robotNR; i++)
  {
    robot[i] = new Robot();
    println("Init robot " + i);
  }


  blocks.setupScenario();
  updateGoal();  
  //blocks.setPreferredVelocities();


  println("Setup completed!");
  drawLimits();
  strokeWeight(2);
}


void draw() {
  //println(stage);
  background(255);
  textSize(10);
  noFill();
  text("fps: " + (int)frameRate, 10, 10);
  draw0x0();

  //blocks.updateVisualization();
  blocks.setPreferredVelocities();  
  instance.doStep();

  for (int i=0; i<robotNR; i++)
  {

    
      translate((float)instance.getAgentPosition(i).getX()/config.getZoom() + config.getTranslateX(), 
     (float)instance.getAgentPosition(i).getY()/config.getZoom() + config.getTranslateY()
     );
     ellipse(0,0,10,10);
     

    if (!esc) {


      if (swarmMode) {
        for (int j=0; j<robotNR; j++) {
          if (j != robotSelected) {
            puncte[stage][j][0] = robot[robotSelected].x;
            puncte[stage][j][1] = robot[robotSelected].y;
          }
        }
        updateGoal();
      }

      if (isStageComplete() && staging) {
        if (stage < puncte.length - 1) stage++;
        else stage = 0;
        updateGoal();
        for (int j=0; j<robotNR; j++) {
          leds.TurnOnHalf1(cPort24[j], culori[stage]);
          //leds.TurnOnHalf2(cPort24[j], culori[stage]);
        }
      }

      robot[i].update(instance.getAgentPosition(i).getX(), instance.getAgentPosition(i).getY());
      instance.setAgentPosition(i, new Vector2D(robot[i].x, robot[i].y));
      instance.setAgentRadius(i, razaRobot);
      instance.setAgentNeighborDistance(i, razaDeOcolit);
    } else {
      robot[i].stop();
    }
    robot[i].drawRobot();
  }
}


boolean isStageComplete() {
  for (int i=0; i<robotNR; i++) {
    if (robot[i].goalReached == false) return false;
  }

  for (int i=1; i < robotNR; i++) {
    robot[i].goalReached = false;
  }
  return true;
}


/* 
 ** Draws a cross in (0,0)
 */
void draw0x0() {
  translate(config.getTranslateX(), 
    config.getTranslateY()
    );       
  line(-5, 0, 5, 0);
  line(0, -5, 0, 5);
  resetMatrix();
}

void drawLimits() {
  println("!!!!Sa nu uiti sa desenezi si sa setezi limitele!!!!!!");
  //documentatia e in Simulation.pde
}

    public static Float scanNumber(String args) {
        Pattern pattern = Pattern.compile("([0-9]+)");
        Matcher matcher = pattern.matcher(args);

        if (matcher.find()) {
          return Integer.parseInt(matcher.group(1)) / (float)15650;
        }
        return 0.0;
    }


void clientEvent(Client someClient) {

  int indexRobot = -1;

  for (int i=0; i<robotNR; i++)
  {
    if (someClient == cPort23[i]) {
      indexRobot = i;
      break;
    }
  }


  if (indexRobot > -1) {

    boolean xRead = false;
    boolean yRead = false;
    boolean oRead = false;
    while (someClient.available() > 20) {

      data[indexRobot] = someClient.readStringUntil(10);   
      data[indexRobot] = data[indexRobot].replaceAll("\\n", "");
      data[indexRobot] = data[indexRobot].replaceAll("\\r", "");

      if (indexRobot==1) {
        //println(someClient.available());
       // println(data[indexRobot]);
      }


      if (data[indexRobot].indexOf("X") == 0) {

        try {
          robot[indexRobot].x = Integer.valueOf(data[indexRobot].substring(1)) * (-1);
          xRead = true;
        }
        catch (NumberFormatException e) {   
          println("err x");
        }
      }


      if (data[indexRobot].indexOf("Y") == 0) {
        try {
          robot[indexRobot].y = Integer.valueOf(data[indexRobot].substring(1));
          yRead = true;
        }
        catch (NumberFormatException e) {        
          println("err y");
        }
      }


      if (data[indexRobot].indexOf("O") == 0) {
        try {
          int tmpDir = Integer.valueOf(data[indexRobot].substring(1));
          robot[indexRobot].dir = (int)(tmpDir / 6.27 + 180) % 360;
          oRead = true;
        }
        catch (NumberFormatException e) {        
          println("err o");
        }
      }
      
      if (xRead && yRead && oRead) {
        someClient.clear();
        break;
      }
      
    }
  }
}


void updateGoal() {
  for (int i = 0; i < robotNR; i++)
  {
    robot[i].goalX = puncte[stage][i][0];
    robot[i].goalY = puncte[stage][i][1];
    blocks.updateGoal(i, puncte[stage][i][0], puncte[stage][i][1]);
  }
}


void stop() {
  for (int i = 0; i < robotNR; i++)
  {
    cPort23[i].stop();
    cPort24[i].stop();
  }
} 


void keyPressed() {

  if (key=='q' || key == 'Q') {
    println("ESC!!");
    esc = !esc;
    for (int i=0; i<robotNR; i++)
    {

      if (cPort24[i] != null && cPort24[i].active()) {
        cPort24[i].write("iw 0 " + config.motorLeftFwd + " 0\n");
        cPort24[i].write("iw 0 " + config.motorRightFwd + " 0\n");
      }
    }
  }


  if (key=='w' || key == 'W') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        cPort24[i].write("iw 0 " + config.motorLeftFwd + " 0\n");
        cPort24[i].write("iw 0 " + config.motorRightFwd + " 0\n");
        delay(10);
        leds.TurnOffHalf1(cPort24[i]);
        leds.TurnOffHalf2(cPort24[i]);
      }
    }
  }

  if (key=='a' || key == 'A') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOffHalf1(cPort24[i]);
        leds.TurnOffHalf2(cPort24[i]);
      }
    }
  }

  if (key=='s' || key == 'S') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0xFF0000");
        leds.TurnOnHalf2(cPort24[i],"0xFF0000");
      }
    }
  }
  
  //albastru
  if (key=='f' || key == 'F') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0xFF");
        leds.TurnOnHalf2(cPort24[i],"0xFF");
      }
    }
  }

//rosu
if (key=='g' || key == 'G') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0x00FF00");
        leds.TurnOnHalf2(cPort24[i],"0x00FF00");
      }
    }
  }

//alb
if (key=='h' || key == 'H') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0xF0F0F0");
        leds.TurnOnHalf2(cPort24[i],"0xF0F0F0");
      }
    }
  }

//GALBEN
if (key=='j' || key == 'J') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0xF0FF00");
        leds.TurnOnHalf2(cPort24[i],"0xF0FF00");
      }
    }
  }


//BLEAU
if (key=='k' || key == 'K') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0xFF0FF0");
        leds.TurnOnHalf2(cPort24[i],"0xFF0FF0");
      }
    }
  }
  
  //ROZ
  if (key=='l' || key == 'L') { //exit!
    for (int i=0; i<robotNR; i++)
    {
      if (cPort24[i]!=null) {
        leds.TurnOnHalf1(cPort24[i],"0x0FFF0F");
        leds.TurnOnHalf2(cPort24[i],"0x0FFF0F");
      }
    }
  }


  if (key=='r' || key == 'R') {
    println("RANDOM!!");
    for (int i=0; i<robotNR; i++)
    {
      puncte[0][i][0] = (int)random(1000 ) - 500;
      puncte[0][i][1] = 200 + (int)random(600);        
      blocks.updateGoal(i, puncte[0][i][0], puncte[0][i][1]);
    }
  }

  if (key=='p' || key == 'P') {
    print("{");
    for (int i=0; i<robotNR; i++)
    {
      print("{" + robot[i].x + "," + robot[i].y + "},");
    }
    println("},");
  }



  if (key=='n' || key == 'N') {
    if (stage<puncte.length-1) { 
      stage++;
    } else {
      stage = 0;
    }
    updateGoal();
  }
}

void disconnectEvent(Client someClient) {
  print("Server Says:  ");
}


void mouseDragged()
{
  config.setTranslateX(config.getTranslateX() + mouseX - pmouseX);
  config.setTranslateY(config.getTranslateY() + mouseY - pmouseY);  
  cf.UpdateXYZ(config.getTranslateX(), config.getTranslateY(), config.getZoom());
}


void mouseClicked() {
  int _x = (int)((mouseX - config.getTranslateX())*config.getZoom());
  int _y = (int)((mouseY - config.getTranslateY())*config.getZoom());


  boolean selected = false;
  for (int i=0; i<robotNR; i++) {
    if (_x > robot[i].x - 20 && _x  < robot[i].x +20)
      if (_y > robot[i].y -20  && _y < robot[i].y + 20)
      {
        println("Robot: " + i + " selected");
        robotSelected = i;
        selected = true;
        cPort24[i].write("ir 1 1\r\n");  //afla bateria!!!
      }
  }

  if (robotSelected > -1 && !selected) {
    println("pacapaca");
    puncte[stage][robotSelected][0] = _x;
    puncte[stage][robotSelected][1] = _y;
    


    if (swarmMode) {
      robot[robotSelected].isLeader = true;
      for (int i=0; i<robotNR; i++) {
        if (i != robotSelected) {
          puncte[stage][i][0] = robot[robotSelected].x;
          puncte[stage][i][1] = robot[robotSelected].x;
          robot[i].isLeader = false;
          leds.TurnOffHalf1(cPort24[i]);
          leds.TurnOffHalf2(cPort24[i]);
        } else {
          leds.TurnOnHalf1(cPort24[i], culori[stage]);
          leds.TurnOnHalf2(cPort24[i], culori[stage]);
        }
      }
    }

    updateGoal();
  }
}


void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  config.setZoom(config.getZoom() + e);
  cf.UpdateXYZ(config.getTranslateX(), config.getTranslateY(), config.getZoom());
}
